env:
  AWS_EC2_METADATA_DISABLED: true
jobs:
  get-modules:
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: list_dirs
        run: echo "::set-output name=matrix::$(ls -d */|sed -e 's/\///'|grep -v 'bless-ca\|scripts'|jq -cnR '[inputs | select(length>0)]')"
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.5
          terraform_wrapper: "false"
      - name: setup
        run: make setup
      - uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
  test:
    name: test ${{ matrix.module }}
    needs: get-modules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            module:
              - '${{ matrix.module }}/**'
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.5
          terraform_wrapper: "false"
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        name: Install bless provider
        run: curl -s https://raw.githubusercontent.com/chanzuckerberg/terraform-provider-bless/main/download.sh | bash -s -- -b $HOME/.terraform.d/plugins/ -d
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        name: Check bless provider
        run: ls -al $HOME/.terraform.d/plugins/terraform-provider-bless*
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        name: Install Snowflake provider
        run: curl -s https://raw.githubusercontent.com/Snowflake-Labs/terraform-provider-snowflake/main/download.sh | bash -s -- -b $HOME/.terraform.d/plugins/ -d
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        name: Check Snowflake provider
        run: ls -al $HOME/.terraform.d/plugins/terraform-provider-snowflake*
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws configure set aws_access_key_id ${{ secrets.CI1_AWS_ACCESS_KEY_ID }} --profile cztack-ci-1
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws configure set aws_secret_access_key ${{ secrets.CI1_AWS_SECRET_ACCESS_KEY }} --profile cztack-ci-1
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws --profile cztack-ci-1 sts get-caller-identity
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws configure set aws_access_key_id ${{ secrets.CI2_AWS_ACCESS_KEY_ID }} --profile cztack-ci-2
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws configure set aws_secret_access_key ${{ secrets.CI2_AWS_SECRET_ACCESS_KEY }} --profile cztack-ci-2
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: aws --profile cztack-ci-2 sts get-caller-identity
      - if: github.event == 'push' || steps.filter.outputs.module == 'true'
        run: make test-ci TEST=./${{ matrix.module }}
    strategy:
      fail-fast: false
      matrix:
        module:
          - ${{fromJson(needs.get-modules.outputs.matrix)}}
          - snowflake-account-grant-all
          - snowflake-database-grant-all
          - snowflake-external-table-grant-all
          - snowflake-file-format-grant-all
          - snowflake-function-grant-all
          - snowflake-integration-grant-all
          - snowflake-masking-policy-grant-all
          - snowflake-materialized-view-grant-all
          - snowflake-pipe-grant-all
          - snowflake-procedure-grant-all
          - snowflake-resource-monitor-grant-all
          - snowflake-row-access-policy-grant-all
          - snowflake-schema-grant-all
          - snowflake-sequence-grant-all
          - snowflake-stage-grant-all
          - snowflake-stream-grant-all
          - snowflake-table-grant-all
          - snowflake-task-grant-all
          - snowflake-view-grant-all
          - snowflake-warehouse-grant-all
    timeout-minutes: 45
name: CI
"on":
  pull_request: null
  push:
    branches:
      - main
