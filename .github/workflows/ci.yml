# To avoid https://github.com/aws/aws-cli/issues/5262
env:
  AWS_EC2_METADATA_DISABLED: true

jobs:
    get-modules:
        runs-on: ubuntu-20.04
        outputs:
            matrix: ${{steps.list_dirs.outputs.matrix}}
        # Modified from https://stackoverflow.com/a/67180216 to filter just directory names
        # and to filter out scripts dir and to disables bless-ca
        steps:
            - uses: actions/checkout@v2
            - id: list_dirs
              run: echo "::set-output name=matrix::$(ls -d */|sed -e 's/\///'|grep -v 'bless-ca\|scripts'|jq -cnR '[inputs | select(length>0)]')"

    check-mod:
        name: check-mod
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-go@v2
              with:
                go-version: 1.15.5
            - run: make check-mod
    lint:
        name: lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 0.12.30
                terraform_wrapper: "false"
            - name: setup
              run: make setup
            - env:
                REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
              name: linters
              run: make lint-ci
    test:
        name: test ${{ matrix.module }}
        runs-on: ubuntu-latest
        needs: get-modules
        strategy:
            fail-fast: false
            matrix:
                module: ${{fromJson(needs.get-modules.outputs.matrix)}}
        steps:
            - uses: actions/checkout@v2
            - id: filter
              uses: dorny/paths-filter@v2
              with:
                filters: |
                    module:
                      - '${{ matrix.module }}/**'
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 0.12.30
                terraform_wrapper: "false"
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              uses: actions/setup-go@v2
              with:
                go-version: 1.14.3
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              name: Install bless provider
              run: curl -s https://raw.githubusercontent.com/chanzuckerberg/terraform-provider-bless/main/download.sh | bash -s -- -b $HOME/.terraform.d/plugins/ -d
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              name: Check bless provider
              run: ls -al $HOME/.terraform.d/plugins/terraform-provider-bless*
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              name: Install Snowflake provider
              run: curl -s https://raw.githubusercontent.com/chanzuckerberg/terraform-provider-snowflake/main/download.sh | bash -s -- -b $HOME/.terraform.d/plugins/ -d
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              name: Check Snowflake provider
              run: ls -al $HOME/.terraform.d/plugins/terraform-provider-snowflake*
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws configure set aws_access_key_id ${{ secrets.CI1_AWS_ACCESS_KEY_ID }} --profile cztack-ci-1
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws configure set aws_secret_access_key ${{ secrets.CI1_AWS_SECRET_ACCESS_KEY }} --profile cztack-ci-1
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws --profile cztack-ci-1 sts get-caller-identity
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws configure set aws_access_key_id ${{ secrets.CI2_AWS_ACCESS_KEY_ID }} --profile cztack-ci-2
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws configure set aws_secret_access_key ${{ secrets.CI2_AWS_SECRET_ACCESS_KEY }} --profile cztack-ci-2
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: aws --profile cztack-ci-2 sts get-caller-identity
            - if: github.event == 'push' || steps.filter.outputs.module == 'true'
              run: make test-ci TEST=./${{ matrix.module }}

        timeout-minutes: 45
name: CI
"on":
    pull_request:
    push:
        branches:
            - main
