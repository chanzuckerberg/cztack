{
  "//": "NOTE: Generated by scripts/snowflake_generate_grant_all.\n\tChanges made directly to this file will be overwritten.\n\tMake improvements there so everyone can benefit.\n  The reason this module exists is that the provider only supports one grant resource per (database_name, schema_name, table_name, on_future, with_grant_option) tuple.\n\tFor example, if you used this module to grant an ALL privilege to a role you couldn't grant a subset of the ALL privs to another role.",
  "variable": {
    "database_name": {
      "type": "string",
      "description": "The name of the database containing the current or future tables on which to grant privileges.",
      "default": null
    },
    "on_future": {
      "type": "bool",
      "description": "When this is set to true and a schema_name is provided, apply this grant on all future tables in the given schema. When this is true and no schema_name is provided apply this grant on all future tables in the given database. The table_name and shares fields must be unset in order to use on_future.",
      "default": null
    },
    "per_privilege_grants": {
      "type": "map(object({shares : list(string),roles : list(string)}))",
      "description": "A map of privileges to authorized roles and shares. Privileges must be UPPER case.\n  This allows you to authorize extra roles/shares for specific privileges.",
      "default": {}
    },
    "roles": {
      "type": "set(string)",
      "description": "Grants privilege to these roles.",
      "default": null
    },
    "schema_name": {
      "type": "string",
      "description": "The name of the schema containing the current or future tables on which to grant privileges.",
      "default": null
    },
    "shares": {
      "type": "set(string)",
      "description": "Grants privilege to these shares (only valid if on_future is unset).",
      "default": null
    },
    "table_name": {
      "type": "string",
      "description": "The name of the table on which to grant privileges immediately (only valid if on_future is unset).",
      "default": null
    },
    "with_grant_option": {
      "type": "bool",
      "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.",
      "default": null
    }
  },
  "locals": {
    "privileges": [
      "DELETE",
      "INSERT",
      "REFERENCES",
      "SELECT",
      "TRUNCATE",
      "UPDATE"
    ]
  },
  "resource": {
    "snowflake_table_grant": {
      "all": {
        "database_name": "${var.database_name}",
        "for_each": "${toset(local.privileges)}",
        "on_future": "${var.on_future}",
        "privilege": "${each.value}",
        "roles": "${setunion(\n\t\t\t\tvar.roles,\n\t\t\t\tlookup(var.per_privilege_grants, each.value, { shares = [], roles = [] }).roles,\n\t\t\t\t)}",
        "schema_name": "${var.schema_name}",
        "shares": "${setunion(\n\t\t\t\tvar.shares,\n\t\t\t\tlookup(var.per_privilege_grants, each.value, { shares = [], roles = [] }).shares,\n\t\t\t\t)}",
        "table_name": "${var.table_name}",
        "with_grant_option": "${var.with_grant_option}"
      }
    }
  },
  "terraform": {
    "required_providers": {
      "snowflake": {
        "source": "chanzuckerberg/snowflake",
        "version": "0.19.0"
      }
    }
  }
}