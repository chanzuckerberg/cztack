{
  "//": "\n\tNOTE: Generated by scripts/snowflake_generate_grant_all.\n\t      Changes made directly to this file will be overwritten.\n\t\t\t\tMake improvements there so everyone can benefit.",
  "variables": {
    "database_name": {
      "type": "string",
      "description": "The name of the database on which to grant privileges.",
      "default": null
    },
    "per_privilege_grants": {
      "type": "map(object({shares : list(string),roles : list(string)})",
      "description": "A map of privileges to authorized roles and shares. Privileges must be UPPER case.\n  This allows you to authorize extra roles/shares for specific privileges.\n  The reason this module exists is that the provider only supports one grant resource per (database_name, schema_name, table_name, on_future, with_grant_option) tuple.\n\tFor example, if you used this module to grant an ALL privilege to a role you couldn't grant a subset of the ALL privs to another role.",
      "default": "{}"
    },
    "roles": {
      "type": "set(string)",
      "description": "Grants privilege to these roles.",
      "default": null
    },
    "shares": {
      "type": "set(string)",
      "description": "Grants privilege to these shares.",
      "default": null
    },
    "with_grant_option": {
      "type": "bool",
      "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.",
      "default": null
    }
  },
  "locals": {
    "privileges": []
  },
  "resources": {
    "snowflake_database_grant": {
      "all": {
        "database_name": "var.database_name",
        "for_each": "toset(local.privileges)",
        "privilege": "each.value",
        "roles": "setunion(\n\t\t\t\tvar.shares,\n\t\t\t\tlookup(var.per_privilege_grants, each.value, { shares = [], roles = [] }).shares,\n\t\t\t\t)",
        "with_grant_option": "var.with_grant_option"
      }
    }
  }
}